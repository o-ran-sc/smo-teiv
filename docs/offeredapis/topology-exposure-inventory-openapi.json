{
  "openapi" : "3.0.2",
  "info" : {
    "description" : "Topology Exposure and Inventory data is the information that represents entities\nin a telecommunications network and the relationships between them that\nprovide insight into a particular aspect of the network of importance to\nspecific use cases. Topology and Inventory data can be derived from\ninventory, configuration, or other data.\n\nTopology Exposure and Inventory supports several topology domains. A domain is a\ngrouping of topology and inventory entities that handles topology and\ninventory data.\n\nEntities are enabling the modelling and storage of complex network\ninfrastructure and relationships.\n\nA relationship is a bi-directional connection between two entities, one\nof which is the originating side (A-side) and the other is the\nterminating side (B-side). The order of the sides matters since it\ndefines the relationship itself which must be unique.\n\nClassifier (also known as tag or label) permits the association of a \nwell defined user specified string with an entity or relationship.\n\nDecorators are user-defined attributes (key-value pairs) which can\nbe applied to topology entities and relationships.\n\nTopology Exposure and Inventory API provides the capabilities to fetch topology\ndata. Using the filtering options, it is possible to define more specific\nquery requests.\n\n## Querying simple entities\nThe *entityTypeName* is used as the root of the queries (from here\nreferred to as RootObject). Every other object, either in *targetFilter* or\n*scopeFilter*, has to relate to the RootObject. The queries are\nconstructed starting from the RootObject and all other objects are joined\nto it. If there is no connection between the RootObject and the other\nobject(s), the query is not constructed. The RootObject still can be\nretrieved and filtered using the */attributes*.\n\n| Use case                                                                                                                                                                                                                                                                                                                                                                                             | domainName | entityTypeName | targetFilter                    | scopeFilter                                                                             | Query result                                                                                                                         |\n|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|:---------------|:--------------------------------|:----------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------|\n| To return the ids for all instances of the entityTypeName used in the query.                                                                                                                                                                                                                                                                                                                         | RAN        | GNBDUFunction  |                                 |                                                                                         | All ids of every GNBDUFunction                                                                                                       |\n| To return all attributes of every instance of the entityTypeName used in the query.                                                                                                                                                                                                                                                                                                                  | RAN        | GNBDUFunction  | /attributes                     |                                                                                         | All GNBDUFunctions with every attribute                                                                                              |\n| To return every instance of the entityTypeName used in the query, but only the attribute that was defined in the *targetFilter* parameter. <br/> Note: The attribute must be a valid field of the object.                                                                                                                                                                                            | RAN        | GNBDUFunction  | /attributes(gNBId)              |                                                                                         | All gNBIds of every GNBDUFunction                                                                                                    |\n| To return every instance of the entityTypeName used in the query, but only the attributes that were defined in the *targetFilter* parameter. <br/> Note: The attributes must be separated by a comma \",\" when using parenthesis \"()\".                                                                                                                                                                | RAN        | GNBDUFunction  | /attributes(gNBId, gNBIdLength) |                                                                                         | All gNBIds and gNBIdLengths of every GNBDUFunction                                                                                   |\n| To return the ids for all instances of the entityTypeName used in the query, that matches the given property in the *scopeFilter* parameter.                                                                                                                                                                                                                                                         | RAN        | GNBDUFunction  |                                 | /sourceIds[contains (@item, 'SubNetwork=Ireland')]                                      | Unique set of ids of GNBDUFunctions, where sourceIds contains *SubNetwork=Ireland*                                                   |\n| To return the ids for all instances of the entityTypeName used in the query, that matches the given attributes in the *scopeFilter* parameter. <br/> Note: The attributes must be separated by a *AND* or *OR*\".                                                                                                                                                                                     | RAN        | GNBDUFunction  |                                 | /attributes [@gNBIdLength=3 and @gNBId=111]                                             | Unique set of ids of GNBDUFunctions, where the gNBIdLength equals 3 and the gNBId equals 111                                         |\n| To return the ids for all instances of the entityTypeName used in the query, that satisfies one of the conditions in the *scopeFilter* parameter. A condition is a complete unit of *scopeFilter* parameter surrounded by square brackets. <br/> Note: Multiple conditions can be given in the scopeFilter separated by a semicolon \";\" to represent AND, or a pipe symbol \"&#124;\" to represent OR. | RAN        | GNBDUFunction  |                                 | /attributes [@gNBIdLength=3]  &#124; /sourceIds[contains (@item, 'SubNetwork=Ireland')] | Unique set of ids of GNBDUFunctions, where the gNBIdLength equals 3 or the sourceIds contains an item with \"SubNetwork=Ireland\"      |\n\n## Querying connected entities\nThe *entityTypeName* is used as the root of the queries.\n\n| Use case                                                                                                                                       | domainName  | entityTypeName | targetFilter | scopeFilter                                                                                                                                                                                                                                   | Query result                                                                                                                                                                                                             |\n|:-----------------------------------------------------------------------------------------------------------------------------------------------|-------------|:---------------|:-------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| To return the ids for all instances of an entityTypeName related by an association.                                                            | REL_OAM_RAN | ENodeBFunction |              | /managed-by-managedElement                                                                                                                                                                                                                    | All ENodeBFunction entities that are managed by any Managed Element.                                                                                                                                                     |\n| To return the ids for all instances of an entityTypeName related by an association to another entity specified by its *id*.                    | REL_OAM_RAN | ENodeBFunction |              | /managed-by-managedElement [@id = 'urn:3gpp:dn: ManagedElement=1']                                                                                                                                                                            | All ENodeBFunction entities that are managed by by the Managed Element *urn:3gpp:dn: ManagedElement=1*.                                                                                                                  |\n| To return the attributes for all instances of an entityTypeName related by one or more associations to other entities specified by their *id*. | REL_OAM_RAN | ENodeBFunction | /attributes  | /attributes [@enbId=1] ; /managed-by-managedElement [@id='urn:3gpp:dn: ManagedElement=1'] &#124;  /managed-by-managedElement [@id='urn:3gpp:dn: ManagedElement=2'] ; /provided-euTranCell [@id='urn:3gpp:dn: ManagedElement=1, EUtranCell=2'] | All EnodeBFunction entities with enbId as *1*, managed by the Managed Element *urn:3gpp:dn: ManagedElement=1* or *urn:3gpp:dn: ManagedElement=2*, and provides EuTranCell *urn:3gpp:dn: ManagedElement=1, EUtranCell=2*. |\n\n## Querying entities for relationships\nThe *entityTypeName* is used as the root of the queries.\n\n| Use case                                                                                                           | domainName  | entityTypeName | entityId                                       | targetFilter                            | scopeFilter                                                        | Query result                                                                                                                                                                                        |\n|:-------------------------------------------------------------------------------------------------------------------|-------------|:---------------|------------------------------------------------|:----------------------------------------|:-------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| To return the relationships for a given entity specified by its id.                                                | RAN         | GNBDUFunction  | urn:3gpp:dn: ManagedElement=1, GNBDUFunction=1 |                                         |                                                                    | All relations for the GNBDUFunction with id *urn:3gpp:dn: ManagedElement=1, GNBDUFunction=1*.                                                                                                       |\n| To return specific relationships for a given entity specified by its id.                                           | REL_OAM_RAN | GNBDUFunction  | urn:3gpp:dn: ManagedElement=1, GNBDUFunction=1 | /MANAGEDELEMENT _MANAGES _GNBDUFUNCTION |                                                                    | All *MANAGEDELEMENT _MANAGES _GNBDUFUNCTION* relations for the GNBDUFunction with id *urn:3gpp:dn: ManagedElement=1, GNBDUFunction=1*.                                                              |\n| To return specific relationships for an entity specified by its id to another entity using its id and association. | REL_OAM_RAN | GNBDUFunction  | urn:3gpp:dn: ManagedElement=1, GNBDUFunction=1 |                                         | /managed-by-managedElement [@id = 'urn:3gpp:dn: ManagedElement=1'] | All *MANAGEDELEMENT _MANAGES _GNBDUFUNCTION* relations for the GNBDUFunction with id *urn:3gpp:dn: ManagedElement=1, GNBDUFunction=1* where the managed element is *urn:3gpp:dn: ManagedElement=1*. |\n\n## Querying on relationships\nHere, the *relationshipTypeName* is used as the root of the queries.\n\n| Use case                                                                                                 | domainName  | relationshipTypeName                    | targetFilter | scopeFilter                                                      | Query result                                                                                                                                                 |\n|:---------------------------------------------------------------------------------------------------------|-------------|:----------------------------------------|:-------------|:-----------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| To return all relationships for a specified relationship type.                                           | REL_OAM_RAN | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION |              |                                                                  | All MANAGEDELEMENT_MANAGES_ENODEBFUNCTION relationships.                                                                                                     |\n| To return all relationships for a specified relationship type with a specified association to an entity. | REL_OAM_RAN | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION |              | /managed-by-managedElement [@id='urn:3gpp:dn: ManagedElement=1'] | All MANAGEDELEMENT_MANAGES_ENODEBFUNCTION relationships having an association *managed-by-managedElement* to ManagedElement *urn:3gpp:dn: ManagedElement=1*. |\n\n## Querying on classifiers and decorators\nThe *domainName* is used as the root of the queries.\n\n| Use case                                                                                                                                          | domainName | targetFilter | scopeFilter                                               | Query result                                                                                                           |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------|------------|--------------|:----------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------|\n| Return all related entity IDs that are exactly matched with the specified classifier with given domain name.                                      | RAN        |              | /classifiers[@item = 'gnbdu-function-model:Indoor']       | All the entity IDs that are classified with \"gnbdu-function-model:Indoor\" in RAN domain.                               |\n| Return all related entity IDs that are partially matched for the given classifier with given domain name.                                         | RAN        |              | /classifiers[contains(@item, 'Ind')]                      | All the entity IDs that are partially matched with \"Ind\" in RAN domain.                                                |\n| Return all related entity IDs that are exactly matched with the key-value pair that specified decorators with given domain name.                  | RAN        |              | /decorators[@gnbdu-function-model:textdata = 'Stockholm'] | All the entity IDs that are exactly matched with \"gnbdu-function-model:textdata = 'Stockholm'\" in RAN domain.          |\n| Return all related entity IDs that are exactly matched with key parameter where the value of the decorator is unknown with given domain name.     | RAN        |              | /decorators[contains(@gnbdu-function-model:textdata, \"\")] | All the entity IDs that are exactly matched with \"gnbdu-function-model:textdata as key of the decorator in RAN domain. |\n\nThe *entityName* is used as the root of the queries.\n\n| Use case                                                                                                                                                                                         | entityName   | relationshipTypeName | targetFilter              | scopeFilter                                                                                                     | Query result                                                                                                                                                                                               |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------|:---------------------|:--------------------------|:----------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Return all related entity IDs and classifiers.                                                                                                                                                   | NRCellDU     |                      | /classifiers              |                                                                                                                 | All NRCellDU IDs and classifiers.                                                                                                                                                                          |\n| Return all related entity IDs and decorators.                                                                                                                                                    | NRCellDU     |                      | /decorators               |                                                                                                                 | All NRCellDU IDs and decorators.                                                                                                                                                                           |\n| Return all related entity IDs that are exact match for the given classifiers and decorators.                                                                                                     | NRCellDU     |                      |                           | /classifiers[@item = 'gnbdu-function-model:Indoor']; /decorators [@gnbdu-function-model:textdata = 'Stockholm'] | All NRCellDU IDs where key of the decorator is \"gnbdu-function-model:textdata\" and the value of the decorator is 'Stockholm'\" and where classifier exactly contains \"gnbdu-function-model:Indoor\".         |\n| Return all related entity IDs and classifiers that are partially matched for the given classifier.                                                                                               | NRCellDU     |                      | /classifiers              | /classifiers[contains(@item, 'Ind')]                                                                            | All NRCellDU IDs and classifiers partially contains the text \"Ind\".                                                                                                                                        |\n| Return all related entity IDs and decorators where key is a exact match and value is partially match.                                                                                            | NRCellDU     |                      | /decorators               | /decorators[contains(@gnbdu-function-model:textdata, 'Stoc')]                                                   | All NRCellDU IDs and where key of the decorator is \"gnbdu-function-model:textdata\" and the value of the decorator partially contains 'Stoc'.                                                               |\n| Return all related entity IDs, decorators and classifiers where key of the decorator is a exact match and value partially matches, and classifiers partially contains from the given parameters. | NRCellDU     |                      | /classifiers; /decorators | /classifiers[contains(@item, 'Ind')]; /decorators[contains(@gnbdu-function-model:textdata, 'Stoc')]             | All NRCellDU IDs and decorators where key of the decorator is \"gnbdu-function-model:textdata\" and the value of the decorator partially contains 'Stoc' and classifiers partially contains the text \"Ind\".  |\n\n The *relationshipTypeName* is used as the root of the queries.\n\n| Use case                                                                                                                                                                                               | entityName | relationshipTypeName                    | targetFilter              | scopeFilter                                                                                                                       | Query result                                                                                                                                                                                                                                |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|:----------------------------------------|:--------------------------|:----------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Return all related relationships IDs and classifiers.                                                                                                                                                  |            | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION | /classifiers              |                                                                                                                                   | All MANAGEDELEMENT _MANAGES _ENODEBFUNCTION IDs and classifiers.                                                                                                                                                                            |\n| Return all related relationships IDs and decorators.                                                                                                                                                   |            | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION | /decorators               |                                                                                                                                   | All MANAGEDELEMENT _MANAGES _ENODEBFUNCTION IDs and decorators.                                                                                                                                                                             |\n| Return all related relationship IDs that are exact match for the given classifier and decorators.                                                                                                      |            | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION |                           | /classifiers[@item = 'gnbdu-function-model:Indoor']; /decorators [@gnbdu-function-model:textdata = 'Stockholm']                   | All MANAGEDELEMENT _MANAGES _ENODEBFUNCTION IDs and decorators where key of the decorator is \"gnbdu-function-model:textdata\" and the value of the decorator is 'Stockholm'\" and classifiers exactly contains \"gnbdu-function-model:Indoor\". |\n| Return all related relationships IDs and classifiers that are partially matched for the given classifier.                                                                                              |            | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION | /classifiers              | /classifiers[contains(@item, 'Ind')]                                                                                              | All MANAGEDELEMENT _MANAGES _ENODEBFUNCTION and classifiers partially contains the text \"Ind\".                                                                                                                                              |\n| Return all related relationships IDs and decorators where key is a exact match and value is partially match.                                                                                           |            | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION | /decorators               | /decorators[contains(@gnbdu-function-model:textdata, 'Stock')]                                                                    | All MANAGEDELEMENT _MANAGES _ENODEBFUNCTION and where key of the decorator is \"gnbdu-function-model:textdata\" and the value of the decorator partially contains 'Stock'.                                                                    |\n| Return all related relationships IDs,decorators and classifiers where key of the decorator is a exact match and value partially matches, and classifiers partially contains from the given parameters. |            | MANAGEDELEMENT _MANAGES _ENODEBFUNCTION | /classifiers; /decorators | /classifiers[contains(@item, 'Ind')]; /decorators[contains(@gnbdu-function-model:textdata, 'Stock')]                              | All MANAGEDELEMENT _MANAGES _ENODEBFUNCTION IDs and decorators where key of the decorator is \"gnbdu-function-model:textdata\" and the value of the decorator partially contains 'Stock' and classifiers partially contains the text \"Ind\".   |\n",
    "license" : {
      "name" : "Copyright (C) 2024 Ericsson, Modifications Copyright (C) 2024 OpenInfra Foundation Europe. All rights reserved.",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "termsOfService" : "http://www.apache.org/licenses/LICENSE-2.0",
    "title" : "Topology Exposure and Inventory API",
    "version" : "0.11.0",
    "x-api-id" : "52812f69-83ac-4dfa-b83a-1a1bdf2d49b8",
    "x-audience" : "external-public"
  },
  "servers" : [ {
    "url" : "https://{host}/topology-inventory/v1alpha11",
    "variables" : {
      "host" : {
        "default" : "localhost",
        "description" : "Change this value to point to your custom host."
      }
    }
  } ],
  "tags" : [ {
    "description" : "Provides the capability to retrieve topology and inventory entities and relationships.",
    "name" : "Entities and relationships"
  }, {
    "description" : "Schemas are defined in YANG modeling language. A group of Yang schemas makes the topology and inventory model, which represents topology and inventory entities, their attributes, and their relationships. For more information on YANG modelling language, see [IETF Documentation](https://datatracker.ietf.org/doc/html/rfc6020).",
    "name" : "Schemas"
  }, {
    "description" : "Provides the capability to update or remove user-defined keywords or tags on entities and relationships.",
    "name" : "Classifiers"
  }, {
    "description" : "Provides the capability to update or remove user-defined values on entities and relationships.",
    "name" : "Decorators"
  }, {
    "description" : "Provides the capability to group topology entities of any type, with an appropriate description and other criteria.",
    "name" : "Topology Groups"
  } ],
  "paths" : {
    "/domains" : {
      "get" : {
        "description" : "Get all the available topology domains.",
        "operationId" : "getAllDomains",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "domains" : {
                    "$ref" : "#/components/examples/DomainsResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Domains"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get all the available topology domains.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/entity-types" : {
      "get" : {
        "description" : "Get all the available topology entity types in domain name.",
        "operationId" : "getTopologyEntityTypes",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "entityTypes" : {
                    "$ref" : "#/components/examples/EntityTypesResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/EntityTypes"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get all the available topology entity types in domain name.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/entity-types/{entityTypeName}/entities" : {
      "get" : {
        "description" : "Get all topology entities of a specific entity type.",
        "operationId" : "getTopologyByEntityTypeName",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "entityTypeName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Use *targetFilter* to specify the entity type and attributes to be returned in the REST response. The value for *targetFilter* can also be a list of entity types and attributes.",
          "examples" : {
            "targetFilter" : {
              "value" : "/attributes(nCI,nRPCI)"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "targetFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Use *scopeFilter* to specify the attributes to match on. The value for *scopeFilter* can also be a list of entity types and attributes. scopeFilter returns a boolean.",
          "examples" : {
            "scopeFilter" : {
              "value" : "/attributes[@nRTAC=310]"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "scopeFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "entities" : {
                    "$ref" : "#/components/examples/EntitiesResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/EntitiesResponseMessage"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get all topology entities of a specific entity type.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/entity-types/{entityTypeName}/entities/{entityId}" : {
      "get" : {
        "description" : "Get topology for entity type name with specified id. Specified id represents the entity instance.",
        "operationId" : "getTopologyById",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/yang.data+json",
            "example" : "application/yang.data+json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "entityTypeName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "entityId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/yang.data+json" : {
                "examples" : {
                  "entity" : {
                    "$ref" : "#/components/examples/EntityResponseExample"
                  }
                },
                "schema" : {
                  "description" : "Refer to yang model for schema definition",
                  "type" : "object"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "404",
                  "title" : "Resource Not Found",
                  "details" : "The requested resource is not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get topology for entity type name with specified id. Specified id represents the entity instance.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/entity-types/{entityTypeName}/entities/{entityId}/relationships" : {
      "get" : {
        "description" : "Get all relationships for entity type name with specified id. Specified id represents the entity instance.",
        "operationId" : "getAllRelationshipsForEntityId",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "entityTypeName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "entityId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Use *targetFilter* to specify the entity type and attributes to be returned in the REST response. The value for *targetFilter* can also be a list of entity types and attributes.",
          "examples" : {
            "targetFilter" : {
              "value" : "/attributes(nCI,nRPCI)"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "targetFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Use *scopeFilter* to specify the attributes to match on. The value for *scopeFilter* can also be a list of entity types and attributes. scopeFilter returns a boolean.",
          "examples" : {
            "scopeFilter" : {
              "value" : "/attributes[@nRTAC=310]"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "scopeFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "relationships" : {
                    "$ref" : "#/components/examples/RelationshipsResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/RelationshipsResponseMessage"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "404",
                  "title" : "Resource Not Found",
                  "details" : "The requested resource is not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get all relationships for entity type name with specified id. Specified id represents the entity instance.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/relationship-types" : {
      "get" : {
        "description" : "Get all the available topology relationship types.",
        "operationId" : "getTopologyRelationshipTypes",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "relationshipTypes" : {
                    "$ref" : "#/components/examples/RelationshipTypesResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/RelationshipTypes"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get all the available topology relationship types.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/relationship-types/{relationshipTypeName}/relationships" : {
      "get" : {
        "description" : "Get topology relationships of a specific relationship type name.",
        "operationId" : "getRelationshipsByType",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "relationshipTypeName",
          "required" : true,
          "schema" : {
            "example" : "NRCELLDU_USES_NRSECTORCARRIER",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Use *targetFilter* to specify the entity type and attributes to be returned in the REST response. The value for *targetFilter* can also be a list of entity types and attributes.",
          "examples" : {
            "targetFilter" : {
              "value" : "/attributes(nCI,nRPCI)"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "targetFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Use *scopeFilter* to specify the attributes to match on. The value for *scopeFilter* can also be a list of entity types and attributes. scopeFilter returns a boolean.",
          "examples" : {
            "scopeFilter" : {
              "value" : "/attributes[@nRTAC=310]"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "scopeFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "relationships" : {
                    "$ref" : "#/components/examples/RelationshipsResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/RelationshipsResponseMessage"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get topology relationships of a specific relationship type name.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/relationship-types/{relationshipTypeName}/relationships/{relationshipId}" : {
      "get" : {
        "description" : "Get relationship with specified id. Specified id represents the relationship instance.",
        "operationId" : "getRelationshipById",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/yang.data+json",
            "example" : "application/yang.data+json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "relationshipTypeName",
          "required" : true,
          "schema" : {
            "example" : "NRCELLDU_USES_NRSECTORCARRIER",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "relationshipId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/yang.data+json" : {
                "examples" : {
                  "relationship" : {
                    "$ref" : "#/components/examples/RelationshipResponseExample"
                  }
                },
                "schema" : {
                  "description" : "Refer to yang model for schema definition",
                  "type" : "object"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "404",
                  "title" : "Resource Not Found",
                  "details" : "The requested resource is not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get relationship with specified id. Specified id represents the relationship instance.",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/domains/{domainName}/entities" : {
      "get" : {
        "description" : "Get topology entities by domain, using specified targetFilter as mandatory query parameter.",
        "operationId" : "getEntitiesByDomain",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "domain name",
          "explode" : false,
          "in" : "path",
          "name" : "domainName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Use *targetFilter* to specify the entity type and attributes to be returned in the REST response. The value for *targetFilter* can also be a list of entity types and attributes.",
          "examples" : {
            "targetFilter" : {
              "value" : "/attributes(nCI,nRPCI)"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "targetFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Use *scopeFilter* to specify the attributes to match on. The value for *scopeFilter* can also be a list of entity types and attributes. scopeFilter returns a boolean.",
          "examples" : {
            "scopeFilter" : {
              "value" : "/attributes[@nRTAC=310]"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "scopeFilter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "entities" : {
                    "$ref" : "#/components/examples/EntitiesResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/EntitiesResponseMessage"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get entities by domain",
        "tags" : [ "Entities and relationships" ]
      }
    },
    "/schemas" : {
      "get" : {
        "description" : "Get a list of all schemas.",
        "operationId" : "getSchemas",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "examples" : {
            "domain" : {
              "value" : "ran"
            }
          },
          "explode" : true,
          "in" : "query",
          "name" : "domain",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "schemas" : {
                    "$ref" : "#/components/examples/SchemasResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get a list of all schemas.",
        "tags" : [ "Schemas" ]
      },
      "post" : {
        "description" : "Create a new schema. The request body shall contain the schema in YANG format.",
        "operationId" : "createSchema",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "header",
          "name" : "Content-Type",
          "required" : true,
          "schema" : {
            "default" : "multipart/form-data",
            "example" : "multipart/form-data",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/MultipartFile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created without response body"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "409",
                  "title" : "Conflicting request",
                  "details" : "The request cannot be processed as the resource is in use."
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Create a new schema.",
        "tags" : [ "Schemas" ]
      }
    },
    "/schemas/{schemaName}/content" : {
      "get" : {
        "description" : "Get the model schema by name.",
        "operationId" : "getSchemaByName",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "schemaName",
          "required" : true,
          "schema" : {
            "default" : "o-ran-smo-teiv-ran",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "examples" : {
                  "schema" : {
                    "$ref" : "#/components/examples/SchemaResponseExample"
                  }
                },
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "404",
                  "title" : "Resource Not Found",
                  "details" : "The requested resource is not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get the model schema.",
        "tags" : [ "Schemas" ]
      }
    },
    "/schemas/{schemaName}" : {
      "delete" : {
        "description" : "Delete a schema.",
        "operationId" : "deleteSchema",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "schemaName",
          "required" : true,
          "schema" : {
            "default" : "o-ran-smo-teiv-ran",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "content" : { },
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Delete a schema.",
        "tags" : [ "Schemas" ]
      }
    },
    "/classifiers" : {
      "post" : {
        "description" : "Update entities and/or relationships with classifier(s). The sum of the given entityIds and relationshipIds cannot exceed 100 by default.",
        "operationId" : "updateClassifier",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "header",
          "name" : "Content-Type",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "classifier" : {
                  "$ref" : "#/components/examples/ClassifierExample"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Classifier"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "content" : { },
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "409",
                  "title" : "Conflicting request",
                  "details" : "The request cannot be processed as the resource is in use."
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Update entities and/or relationships with classifier(s).",
        "tags" : [ "Classifiers" ]
      }
    },
    "/decorators" : {
      "post" : {
        "description" : "Update entities and/or relationships with decorator(s). The sum of the given entityIds and relationshipIds cannot exceed 100 by default.",
        "operationId" : "updateDecorator",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "header",
          "name" : "Content-Type",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "decorator" : {
                  "$ref" : "#/components/examples/DecoratorExample"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Decorator"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "content" : { },
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "409",
                  "title" : "Conflicting request",
                  "details" : "The request cannot be processed as the resource is in use."
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Update entities and/or relationships with decorator(s).",
        "tags" : [ "Decorators" ]
      }
    },
    "/groups" : {
      "get" : {
        "description" : "Get all groups.",
        "operationId" : "getAllGroups",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Pagination offset.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "integer"
          },
          "style" : "form"
        }, {
          "description" : "Result limiter.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 500,
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "groups" : {
                    "$ref" : "#/components/examples/GroupsResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Groups"
                }
              }
            },
            "description" : "OK"
          },
          "204" : {
            "content" : { },
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get all groups.",
        "tags" : [ "Topology Groups" ]
      },
      "post" : {
        "description" : "Create group.",
        "operationId" : "createGroup",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "header",
          "name" : "Content-Type",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "dynamicGroup" : {
                  "$ref" : "#/components/examples/DynamicGroupExample"
                },
                "staticGroup" : {
                  "$ref" : "#/components/examples/StaticGroupExample"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Group"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "group" : {
                    "$ref" : "#/components/examples/GroupResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/GroupResponse"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "409",
                  "title" : "Conflicting request",
                  "details" : "The request cannot be processed as the resource is in use."
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Create group.",
        "tags" : [ "Topology Groups" ]
      }
    },
    "/groups/{groupId}" : {
      "delete" : {
        "description" : "Delete a group with specified id.",
        "operationId" : "deleteGroup",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "204" : {
            "content" : { },
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "404",
                  "title" : "Resource Not Found",
                  "details" : "The requested resource is not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Delete a group with specified id.",
        "tags" : [ "Topology Groups" ]
      },
      "get" : {
        "description" : "Get a Group with specified id.",
        "operationId" : "getGroup",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "group" : {
                    "$ref" : "#/components/examples/GroupResponseExample"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/GroupResponse"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "404",
                  "title" : "Resource Not Found",
                  "details" : "The requested resource is not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get a group with specified id.",
        "tags" : [ "Topology Groups" ]
      },
      "put" : {
        "description" : "Update a Group.",
        "operationId" : "updateGroup",
        "parameters" : [ {
          "explode" : false,
          "in" : "header",
          "name" : "Accept",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "header",
          "name" : "Content-Type",
          "required" : true,
          "schema" : {
            "default" : "application/json",
            "example" : "application/json",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "explode" : false,
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "dynamicGroup" : {
                  "$ref" : "#/components/examples/DynamicGroupExample"
                },
                "staticGroup" : {
                  "$ref" : "#/components/examples/StaticGroupExample"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Group"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "content" : { },
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "400",
                  "title" : "Bad Request",
                  "details" : "The provided request is not valid"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "401",
                  "title" : "Unauthorized request",
                  "details" : "This request is unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "403",
                  "title" : "Request Forbidden",
                  "details" : "This request is forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "409",
                  "title" : "Conflicting request",
                  "details" : "The request cannot be processed as the resource is in use."
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "example" : {
                  "status" : "500",
                  "title" : "Internal Server Error",
                  "details" : "Internal Server Error occurred"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Update a Group.",
        "tags" : [ "Topology Groups" ]
      }
    }
  },
  "components" : {
    "examples" : {
      "ClassifierExample" : {
        "value" : {
          "operation" : "merge",
          "classifiers" : [ "module-x:Outdoor", "module-y:Rural", "module-z:Weekend" ],
          "entityIds" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2" ],
          "relationshipIds" : [ "urn:o-ran:smo:teiv:sha512:NRCELLDU_USES_NRSECTORCARRIER=CA576F4716C36A1BD1C506DCB58418FC731858D3D3F856F536813A8C4D3F1CC21292E506815410E04496D709D96066EBC0E4890DEFC3789EDC4BD9C28DA1D52B" ]
        }
      },
      "DecoratorExample" : {
        "value" : {
          "operation" : "merge",
          "decorators" : {
            "module-x:location" : "Stockholm",
            "module-y:vendor" : "Ericsson"
          },
          "entityIds" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2" ],
          "relationshipIds" : [ "urn:o-ran:smo:teiv:sha512:NRCELLDU_USES_NRSECTORCARRIER=CA576F4716C36A1BD1C506DCB58418FC731858D3D3F856F536813A8C4D3F1CC21292E506815410E04496D709D96066EBC0E4890DEFC3789EDC4BD9C28DA1D52B" ]
        }
      },
      "EntityResponseExample" : {
        "value" : {
          "o-ran-smo-teiv-ran:GNBDUFunction" : [ {
            "id" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1",
            "attributes" : {
              "gNBDUId" : 11,
              "dUpLMNId" : {
                "mcc" : 110,
                "mnc" : 210
              },
              "gNBId" : 21,
              "gNBIdLength" : 2
            },
            "decorators" : {
              "location" : "Stockholm"
            },
            "classifiers" : [ "Rural" ],
            "sourceIds" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1", "urn:cmHandle:395221E080CCF0FD1924103B15873814" ],
            "metadata" : {
              "trustLevel" : "RELIABLE"
            }
          } ]
        }
      },
      "EntitiesResponseExample" : {
        "value" : {
          "items" : [ {
            "o-ran-smo-teiv-ran:NRCellDU" : [ {
              "id" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1",
              "attributes" : {
                "cellLocalId" : 4589,
                "nCI" : 1,
                "nRPCI" : 12,
                "nRTAC" : 310
              },
              "decorators" : {
                "location" : "Stockholm"
              },
              "classifiers" : [ "Rural" ],
              "sourceIds" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1", "urn:cmHandle:395221E080CCF0FD1924103B15873814" ],
              "metadata" : {
                "trustLevel" : "RELIABLE"
              }
            } ]
          }, {
            "o-ran-smo-teiv-ran:NRCellDU" : [ {
              "id" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2",
              "attributes" : {
                "cellLocalId" : 4559,
                "nRPCI" : 32,
                "nRTAC" : 510
              },
              "decorators" : {
                "location" : "Stockholm"
              },
              "classifiers" : [ "Rural" ],
              "sourceIds" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2", "urn:cmHandle:395221E080CCF0FD1924103B15873814" ],
              "metadata" : {
                "trustLevel" : "RELIABLE"
              }
            } ]
          } ],
          "self" : {
            "href" : "/domains/RAN/entity-types/NRCellDU/entities?offset=0&limit=500&targetFilter=attributes(nCI,nRPCI)&scopeFilter=/attributes[@nRTAC=310]"
          },
          "first" : {
            "href" : "/domains/RAN/entity-types/NRCellDU/entities?offset=0&limit=500&targetFilter=attributes(nCI,nRPCI)&scopeFilter=/attributes[@nRTAC=310]"
          },
          "prev" : {
            "href" : "/domains/RAN/entity-types/NRCellDU/entities?offset=0&limit=500&targetFilter=attributes(nCI,nRPCI)&scopeFilter=/attributes[@nRTAC=310]"
          },
          "next" : {
            "href" : "/domains/RAN/entity-types/NRCellDU/entities?offset=500&limit=500&targetFilter=attributes(nCI,nRPCI)&scopeFilter=/attributes[@nRTAC=310]"
          },
          "last" : {
            "href" : "/domains/RAN/entity-types/NRCellDU/entities?offset=678&limit=500&targetFilter=attributes(nCI,nRPCI)&scopeFilter=/attributes[@nRTAC=310]"
          },
          "totalCount" : 12
        }
      },
      "RelationshipResponseExample" : {
        "value" : {
          "o-ran-smo-teiv-ran:NRCELLDU_USES_NRSECTORCARRIER" : [ {
            "id" : "urn:o-ran:smo:teiv:sha512:NRCELLDU_USES_NRSECTORCARRIER=CA576F4716C36A1BD1C506DCB58418FC731858D3D3F856F536813A8C4D3F1CC21292E506815410E04496D709D96066EBC0E4890DEFC3789EDC4BD9C28DA1D52B",
            "aSide" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1",
            "bSide" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRSectorCarrier=1",
            "decorators" : {
              "location" : "Stockholm"
            },
            "classifiers" : [ "Rural" ],
            "sourceIds" : [ ],
            "metadata" : {
              "trustLevel" : "RELIABLE"
            }
          } ]
        }
      },
      "RelationshipsResponseExample" : {
        "value" : {
          "items" : [ {
            "o-ran-smo-teiv-ran:NRCELLDU_USES_NRSECTORCARRIER" : [ {
              "id" : "urn:o-ran:smo:teiv:sha512:NRCELLDU_USES_NRSECTORCARRIER=CA576F4716C36A1BD1C506DCB58418FC731858D3D3F856F536813A8C4D3F1CC21292E506815410E04496D709D96066EBC0E4890DEFC3789EDC4BD9C28DA1D52B",
              "aSide" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1",
              "bSide" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRSectorCarrier=1",
              "decorators" : {
                "location" : "Stockholm"
              },
              "classifiers" : [ "Rural" ],
              "sourceIds" : [ ],
              "metadata" : {
                "trustLevel" : "RELIABLE"
              }
            } ]
          }, {
            "o-ran-smo-teiv-ran:NRCELLDU_USES_NRSECTORCARRIER" : [ {
              "id" : "urn:o-ran:smo:teiv:sha512:NRCELLDU_USES_NRSECTORCARRIER=11AB21444F9D7C6DAC7453879AB5586D294B495E43AC6F94750767DD624014DB7317E9A5EE73239876649D801037D6347355B19C5D97222B3C25000CF8A97C78",
              "aSide" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2",
              "bSide" : "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRSectorCarrier=2",
              "decorators" : {
                "location" : "Stockholm"
              },
              "classifiers" : [ "Rural" ],
              "sourceIds" : [ ],
              "metadata" : {
                "trustLevel" : "RELIABLE"
              }
            } ]
          } ],
          "self" : {
            "href" : "/domains/RAN/relationship-types/NRCELLDU_USES_NRSECTORCARRIER/relationships?offset=0&limit=500"
          },
          "first" : {
            "href" : "/domains/RAN/relationship-types/NRCELLDU_USES_NRSECTORCARRIER/relationships?offset=0&limit=500"
          },
          "prev" : {
            "href" : "/domains/RAN/relationship-types/NRCELLDU_USES_NRSECTORCARRIER/relationships?offset=0&limit=500"
          },
          "next" : {
            "href" : "/domains/RAN/relationship-types/NRCELLDU_USES_NRSECTORCARRIER/relationships?offset=500&limit=500"
          },
          "last" : {
            "href" : "/domains/RAN/relationship-types/NRCELLDU_USES_NRSECTORCARRIER/relationships?offset=678&limit=500"
          },
          "totalCount" : 23
        }
      },
      "EntityTypesResponseExample" : {
        "value" : {
          "items" : [ {
            "name" : "GNBCUUPFunction",
            "entities" : {
              "href" : "/domains/RAN/entity-types/GNBCUUPFunction/entities"
            }
          }, {
            "name" : "NRCellDU",
            "entities" : {
              "href" : "/domains/RAN/entity-types/NRCellDU/entities"
            }
          }, {
            "name" : "GNBDUFunction",
            "entities" : {
              "href" : "/domains/RAN/entity-types/GNBDUFunction/entities"
            }
          } ],
          "self" : {
            "href" : "/domains/RAN/entity-types?offset=0&limit=500"
          },
          "first" : {
            "href" : "/domains/RAN/entity-types?offset=0&limit=500"
          },
          "prev" : {
            "href" : "/domains/RAN/entity-types?offset=0&limit=500"
          },
          "next" : {
            "href" : "/domains/RAN/entity-types?offset=500&limit=500"
          },
          "last" : {
            "href" : "/domains/RAN/entity-types?offset=678&limit=500"
          },
          "totalCount" : 43
        }
      },
      "RelationshipTypesResponseExample" : {
        "value" : {
          "items" : [ {
            "name" : "MANAGEDELEMENT_MANAGES_GNBDUFUNCTION",
            "relationships" : {
              "href" : "/domains/RAN/relationship-types/MANAGEDELEMENT_MANAGES_GNBDUFUNCTION/relationships"
            }
          }, {
            "name" : "GNBDUFUNCTION_PROVIDES_NRCELLDU",
            "relationships" : {
              "href" : "/domains/RAN/relationship-types/GNBDUFUNCTION_PROVIDES_NRCELLDU/relationships"
            }
          }, {
            "name" : "NRCELLDU_USES_NRSECTORCARRIER",
            "relationships" : {
              "href" : "/domains/RAN/relationship-types/NRCELLDU_USES_NRSECTORCARRIER/relationships"
            }
          } ],
          "self" : {
            "href" : "/domains/RAN/relationship-types?offset=0&limit=500"
          },
          "first" : {
            "href" : "/domains/RAN/relationship-types?offset=0&limit=500"
          },
          "prev" : {
            "href" : "/domains/RAN/relationship-types?offset=0&limit=500"
          },
          "next" : {
            "href" : "/domains/RAN/relationship-types?offset=500&limit=500"
          },
          "last" : {
            "href" : "/domains/RAN/relationship-types?offset=678&limit=500"
          },
          "totalCount" : 21
        }
      },
      "DomainsResponseExample" : {
        "value" : {
          "items" : [ {
            "name" : "EQUIPMENT",
            "entityTypes" : {
              "href" : "/domains/EQUIPMENT/entity-types"
            },
            "relationshipTypes" : {
              "href" : "/domains/EQUIPMENT/relationship-types"
            }
          }, {
            "name" : "OAM",
            "entityTypes" : {
              "href" : "/domains/OAM/entity-types"
            },
            "relationshipTypes" : {
              "href" : "/domains/OAM/relationship-types"
            }
          }, {
            "name" : "RAN",
            "entityTypes" : {
              "href" : "/domains/RAN/entity-types"
            },
            "relationshipTypes" : {
              "href" : "/domains/RAN/relationship-types"
            }
          } ],
          "self" : {
            "href" : "/domains?offset=0&limit=500"
          },
          "first" : {
            "href" : "/domains?offset=0&limit=500"
          },
          "prev" : {
            "href" : "/domains?offset=0&limit=500"
          },
          "next" : {
            "href" : "/domains?offset=500&limit=500"
          },
          "last" : {
            "href" : "/domains?offset=678&limit=500"
          },
          "totalCount" : 343
        }
      },
      "StaticGroupExample" : {
        "value" : {
          "groupName" : "son-cell-filter-group-1",
          "criteria" : {
            "resourceInstances" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=3" ]
          }
        }
      },
      "DynamicGroupExample" : {
        "value" : {
          "groupName" : "son-cell-filter-group-1",
          "criteria" : {
            "resourceQuery" : {
              "url" : "/domains/RAN/entity-types/NRCellDU/entities",
              "method" : "GET",
              "queryParams" : {
                "target:Filter" : "/sourceIds",
                "scopeFilter" : "/attributes[@nRTAC=310]"
              },
              "requestBody" : ""
            }
          }
        }
      },
      "GroupResponseExample" : {
        "value" : {
          "id" : "urn:o-ran:smo:teiv:group:/JHKJ4H5JH45345TB=",
          "groupName" : "son-cell-filter-group-1",
          "criteria" : {
            "resourceInstances" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=3" ]
          }
        }
      },
      "GroupsResponseExample" : {
        "value" : {
          "items" : [ {
            "id" : "urn:o-ran:smo:teiv:group:/JHKJ4H5JH45345TB=",
            "groupName" : "son-cell-group-1",
            "criteria" : {
              "resourceInstances" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=1", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=2", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=3" ]
            }
          }, {
            "id" : "urn:o-ran:smo:teiv:group:/DFJER77R6F7S9VD=",
            "groupName" : "son-cell-group-2",
            "criteria" : {
              "resourceInstances" : [ "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=4", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=5", "urn:3gpp:dn:ManagedElement=1,GNBDUFunction=1,NRCellDU=6" ]
            }
          }, {
            "id" : "urn:o-ran:smo:teiv:group:/LMND77R6F7S9VD=",
            "groupName" : "son-cell-group-3",
            "criteria" : {
              "resourceQuery" : {
                "url" : "/domains/RAN/entity-types/NRCellDU/entities",
                "method" : "GET",
                "queryParams" : {
                  "target:Filter" : "/sourceIds",
                  "scopeFilter" : "/attributes[@nRTAC=310]"
                },
                "requestBody" : ""
              }
            }
          } ],
          "self" : {
            "href" : "/groups?offset=0&limit=500"
          },
          "first" : {
            "href" : "/groups?offset=0&limit=500"
          },
          "prev" : {
            "href" : "/groups?offset=0&limit=500"
          },
          "next" : {
            "href" : "/groups?offset=0&limit=500"
          },
          "last" : {
            "href" : "/groups?offset=0&limit=500"
          },
          "totalCount" : 3
        }
      },
      "SchemasResponseExample" : {
        "value" : {
          "items" : [ {
            "name" : "o-ran-smo-teiv-ran",
            "domain" : "RAN",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-ran/content"
            }
          }, {
            "name" : "o-ran-smo-teiv-equipment",
            "domain" : "EQUIPMENT",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-equipment/content"
            }
          }, {
            "name" : "o-ran-smo-teiv-oam",
            "domain" : "OAM",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-oam/content"
            }
          }, {
            "name" : "o-ran-smo-teiv-rel-oam-ran",
            "domain" : "REL_OAM_RAN",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-rel-oam-ran/content"
            }
          }, {
            "name" : "o-ran-smo-teiv-rel-equipment-ran",
            "domain" : "REL_EQUIPMENT_RAN",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-rel-equipment-ran/content"
            }
          }, {
            "name" : "o-ran-smo-teiv-common-yang-types",
            "domain" : "",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-common-yang-types/content"
            }
          }, {
            "name" : "o-ran-smo-teiv-common-yang-extensions",
            "domain" : "",
            "revision" : "2024-05-24",
            "content" : {
              "href" : "/schemas/o-ran-smo-teiv-common-yang-extensions/content"
            }
          }, {
            "name" : "ietf-geo-location",
            "domain" : "",
            "revision" : "2022-02-11",
            "content" : {
              "href" : "/schemas/ietf-geo-location/content"
            }
          }, {
            "name" : "_3gpp-common-yang-extensions",
            "domain" : "",
            "revision" : "2019-06-23",
            "content" : {
              "href" : "/schemas/_3gpp-common-yang-extensions/content"
            }
          }, {
            "name" : "_3gpp-common-yang-types",
            "domain" : "",
            "revision" : "2023-11-06",
            "content" : {
              "href" : "/schemas/_3gpp-common-yang-types/content"
            }
          }, {
            "name" : "ietf-yang-types",
            "domain" : "",
            "revision" : "2013-07-15",
            "content" : {
              "href" : "/schemas/ietf-yang-types/content"
            }
          }, {
            "name" : "ietf-inet-types",
            "domain" : "",
            "revision" : "2013-07-15",
            "content" : {
              "href" : "/schemas/ietf-inet-types/content"
            }
          } ],
          "self" : {
            "href" : "/schemas?offset=0&limit=500"
          },
          "first" : {
            "href" : "/schemas?offset=0&limit=500"
          },
          "prev" : {
            "href" : "/schemas?offset=0&limit=500"
          },
          "next" : {
            "href" : "/schemas?offset=0&limit=500"
          },
          "last" : {
            "href" : "/schemas?offset=0&limit=500"
          },
          "totalCount" : 12
        }
      },
      "SchemaResponseExample" : {
        "value" : "module o-ran-smo-teiv-ran {\nyang-version 1.1;\nnamespace \"urn:o-ran:smo-teiv-ran\";\nprefix or-teiv-ran;\nimport o-ran-smo-teiv-common-yang-types {prefix or-teiv-types; }\nimport o-ran-smo-teiv-common-yang-extensions {prefix or-teiv-yext; }\nimport _3gpp-common-yang-types { prefix types3gpp; }\norganization \"ORAN\";\ndescription\n\"Sample Model.\";\nrevision \"2024-05-24\" {\n  description \"Initial revision.\"\n  or-teiv-yext:label 0.1.0;\n}\nor-teiv-yext:domain RAN;\nlist GNBDUFunction {\n  uses or-teiv-types:Top_Grp_Type;\n  key id;\n  container attributes {\n    container dUpLMNId {\n      uses types3gpp:PLMNId;\n    }\n    leaf gNBDUId {\n      type uint32;\n    }\n    leaf gNBId {\n      type uint32;\n    }\n    leaf gNBIdLength {\n      type uint32;\n    }\n  }\n}\nlist NRCellDU {\n  uses or-teiv-types:Top_Grp_Type;\n  key id;\n  container attributes {\n    leaf cellLocalId {\n      type uint32;\n    }\n    leaf nCI {\n      type uint32;\n    }\n    leaf nRPCI {\n      type uint32;\n    }\n    leaf nRTAC {\n      type uint32;\n    }\n  }\n}\nlist NRSectorCarrier {\n  uses or-teiv-types:Top_Grp_Type;\n  key id;\n    container attributes {\n      leaf arfcnDL {\n        type uint32;\n      }\n      leaf arfcnUL {\n        type uint32;\n      }\n      leaf frequencyDL {\n        type uint32;\n      }\n      leaf frequencyUL {\n        type uint32;\n      }\n      leaf bSChannelBwDL {\n        type uint32;\n      }\n    }\n  }\n}\n"
      }
    },
    "parameters" : {
      "acceptJsonInHeader" : {
        "explode" : false,
        "in" : "header",
        "name" : "Accept",
        "required" : true,
        "schema" : {
          "default" : "application/json",
          "example" : "application/json",
          "type" : "string"
        },
        "style" : "simple"
      },
      "acceptYangJsonInHeader" : {
        "explode" : false,
        "in" : "header",
        "name" : "Accept",
        "required" : true,
        "schema" : {
          "default" : "application/yang.data+json",
          "example" : "application/yang.data+json",
          "type" : "string"
        },
        "style" : "simple"
      },
      "contentTypeMultipartFileInHeader" : {
        "explode" : false,
        "in" : "header",
        "name" : "Content-Type",
        "required" : true,
        "schema" : {
          "default" : "multipart/form-data",
          "example" : "multipart/form-data",
          "type" : "string"
        },
        "style" : "simple"
      },
      "contentTypeJsonInHeader" : {
        "explode" : false,
        "in" : "header",
        "name" : "Content-Type",
        "required" : true,
        "schema" : {
          "default" : "application/json",
          "example" : "application/json",
          "type" : "string"
        },
        "style" : "simple"
      },
      "offsetParam" : {
        "description" : "Pagination offset.",
        "explode" : true,
        "in" : "query",
        "name" : "offset",
        "required" : false,
        "schema" : {
          "default" : 0,
          "minimum" : 0,
          "type" : "integer"
        },
        "style" : "form"
      },
      "limitParam" : {
        "description" : "Result limiter.",
        "explode" : true,
        "in" : "query",
        "name" : "limit",
        "required" : false,
        "schema" : {
          "default" : 500,
          "maximum" : 500,
          "minimum" : 1,
          "type" : "integer"
        },
        "style" : "form"
      },
      "domainNameInPath" : {
        "description" : "domain name",
        "explode" : false,
        "in" : "path",
        "name" : "domainName",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "schemaNameInPath" : {
        "explode" : false,
        "in" : "path",
        "name" : "schemaName",
        "required" : true,
        "schema" : {
          "default" : "o-ran-smo-teiv-ran",
          "type" : "string"
        },
        "style" : "simple"
      },
      "groupIdInPath" : {
        "explode" : false,
        "in" : "path",
        "name" : "groupId",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "entityIdInPath" : {
        "explode" : false,
        "in" : "path",
        "name" : "entityId",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "relationshipIdInPath" : {
        "explode" : false,
        "in" : "path",
        "name" : "relationshipId",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "entityTypeNameInPath" : {
        "explode" : false,
        "in" : "path",
        "name" : "entityTypeName",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "relationshipTypeNameInPath" : {
        "explode" : false,
        "in" : "path",
        "name" : "relationshipTypeName",
        "required" : true,
        "schema" : {
          "example" : "NRCELLDU_USES_NRSECTORCARRIER",
          "type" : "string"
        },
        "style" : "simple"
      },
      "domainOptionalInQuery" : {
        "examples" : {
          "domain" : {
            "value" : "ran"
          }
        },
        "explode" : true,
        "in" : "query",
        "name" : "domain",
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "style" : "form"
      },
      "targetFilterOptionalInQuery" : {
        "description" : "Use *targetFilter* to specify the entity type and attributes to be returned in the REST response. The value for *targetFilter* can also be a list of entity types and attributes.",
        "examples" : {
          "targetFilter" : {
            "value" : "/attributes(nCI,nRPCI)"
          }
        },
        "explode" : true,
        "in" : "query",
        "name" : "targetFilter",
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "style" : "form"
      },
      "scopeFilterOptionalInQuery" : {
        "description" : "Use *scopeFilter* to specify the attributes to match on. The value for *scopeFilter* can also be a list of entity types and attributes. scopeFilter returns a boolean.",
        "examples" : {
          "scopeFilter" : {
            "value" : "/attributes[@nRTAC=310]"
          }
        },
        "explode" : true,
        "in" : "query",
        "name" : "scopeFilter",
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "style" : "form"
      }
    },
    "responses" : {
      "NotFound" : {
        "content" : {
          "application/problem+json" : {
            "example" : {
              "status" : "404",
              "title" : "Resource Not Found",
              "details" : "The requested resource is not found"
            },
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description" : "Not Found"
      },
      "Unauthorized" : {
        "content" : {
          "application/problem+json" : {
            "example" : {
              "status" : "401",
              "title" : "Unauthorized request",
              "details" : "This request is unauthorized"
            },
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description" : "Unauthorized"
      },
      "Forbidden" : {
        "content" : {
          "application/problem+json" : {
            "example" : {
              "status" : "403",
              "title" : "Request Forbidden",
              "details" : "This request is forbidden"
            },
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description" : "Forbidden"
      },
      "BadRequest" : {
        "content" : {
          "application/problem+json" : {
            "example" : {
              "status" : "400",
              "title" : "Bad Request",
              "details" : "The provided request is not valid"
            },
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description" : "Bad Request"
      },
      "Conflict" : {
        "content" : {
          "application/problem+json" : {
            "example" : {
              "status" : "409",
              "title" : "Conflicting request",
              "details" : "The request cannot be processed as the resource is in use."
            },
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description" : "Conflict"
      },
      "Created" : {
        "description" : "Created without response body"
      },
      "InternalServerError" : {
        "content" : {
          "application/problem+json" : {
            "example" : {
              "status" : "500",
              "title" : "Internal Server Error",
              "details" : "Internal Server Error occurred"
            },
            "schema" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description" : "Internal Server Error"
      },
      "NoContent" : {
        "content" : { },
        "description" : "No Content"
      }
    },
    "schemas" : {
      "Classifier" : {
        "properties" : {
          "operation" : {
            "enum" : [ "merge", "delete" ],
            "type" : "string"
          },
          "classifiers" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "entityIds" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "relationshipIds" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "title" : "Classifier",
        "type" : "object"
      },
      "GroupResponse" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "groupName" : {
            "type" : "string"
          },
          "criteria" : {
            "$ref" : "#/components/schemas/GroupResponse_criteria"
          }
        },
        "type" : "object"
      },
      "Group" : {
        "properties" : {
          "groupName" : {
            "type" : "string"
          },
          "criteria" : {
            "$ref" : "#/components/schemas/TopologySelection"
          }
        },
        "type" : "object"
      },
      "Groups" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/GroupResponse"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "Groups",
        "type" : "object"
      },
      "TopologySelection" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/StaticSelection"
        }, {
          "$ref" : "#/components/schemas/DynamicSelection"
        } ]
      },
      "StaticSelection" : {
        "properties" : {
          "resourceInstances" : {
            "items" : {
              "type" : "string"
            },
            "minItems" : 1,
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "DynamicSelection" : {
        "additionalProperties" : false,
        "properties" : {
          "resourceQuery" : {
            "$ref" : "#/components/schemas/DynamicSelection_resourceQuery"
          }
        },
        "type" : "object"
      },
      "Decorator" : {
        "properties" : {
          "operation" : {
            "enum" : [ "merge", "delete" ],
            "type" : "string"
          },
          "decorators" : {
            "additionalProperties" : true,
            "description" : "Decorators must be defined in schema before use. Data type of a decorator is restricted as defined by it's schema.",
            "type" : "object"
          },
          "entityIds" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "relationshipIds" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "title" : "Decorator",
        "type" : "object"
      },
      "Domains" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Domains_items_inner"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "Domains",
        "type" : "object"
      },
      "EntityTypes" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/EntityTypes_items_inner"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "EntityTypes",
        "type" : "object"
      },
      "EntitiesResponseMessage" : {
        "properties" : {
          "items" : {
            "items" : {
              "description" : "Refer to yang model for schema definition of topology entities",
              "type" : "object"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "Entities",
        "type" : "object"
      },
      "RelationshipTypes" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/RelationshipTypes_items_inner"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "RelationshipTypes",
        "type" : "object"
      },
      "RelationshipsResponseMessage" : {
        "properties" : {
          "items" : {
            "items" : {
              "description" : "Refer to yang model for schema definition of topology relationships",
              "type" : "object"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "Relationships",
        "type" : "object"
      },
      "ErrorMessage" : {
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "details" : {
            "type" : "string"
          }
        },
        "title" : "Error",
        "type" : "object"
      },
      "Href" : {
        "properties" : {
          "href" : {
            "format" : "uri-template",
            "type" : "string"
          }
        },
        "title" : "Href",
        "type" : "object"
      },
      "MultipartFile" : {
        "properties" : {
          "file" : {
            "description" : "multipartFile",
            "format" : "binary",
            "type" : "string"
          }
        },
        "required" : [ "file" ],
        "type" : "object"
      },
      "Schema" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "revision" : {
            "type" : "string"
          },
          "content" : {
            "$ref" : "#/components/schemas/Href"
          }
        },
        "title" : "Schema",
        "type" : "object"
      },
      "SchemaList" : {
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/Schema"
            },
            "type" : "array"
          },
          "self" : {
            "$ref" : "#/components/schemas/Href"
          },
          "first" : {
            "$ref" : "#/components/schemas/Href"
          },
          "prev" : {
            "$ref" : "#/components/schemas/Href"
          },
          "next" : {
            "$ref" : "#/components/schemas/Href"
          },
          "last" : {
            "$ref" : "#/components/schemas/Href"
          },
          "totalCount" : {
            "type" : "integer"
          }
        },
        "title" : "Schemas",
        "type" : "object"
      },
      "GroupResponse_criteria" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/StaticSelection"
        }, {
          "$ref" : "#/components/schemas/DynamicSelection"
        } ]
      },
      "DynamicSelection_resourceQuery" : {
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "queryParams" : {
            "type" : "object"
          },
          "requestBody" : {
            "type" : "object"
          }
        },
        "required" : [ "url" ],
        "type" : "object"
      },
      "Domains_items_inner" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "entityTypes" : {
            "$ref" : "#/components/schemas/Href"
          },
          "relationshipTypes" : {
            "$ref" : "#/components/schemas/Href"
          }
        }
      },
      "EntityTypes_items_inner" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "entities" : {
            "$ref" : "#/components/schemas/Href"
          }
        },
        "type" : "object"
      },
      "RelationshipTypes_items_inner" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Href"
          }
        },
        "type" : "object"
      }
    }
  }
}